--[[DOC BOX:
// This is the main file for the operating system.
// As the name of the file implies, this is the file
// startup will call to boot up the OS. When a stable
// build is released, this file will be locked with
// raw pull event. 
//
// CAUTION:
// Alpha, and beta builds, will not have this raw
// pull event. It is recommended testing these
// builds with only one or two trusted users on the
// system.
//
// INFO:
// Do not edit this file unless you know what you are
// doing. A typo here could keep the whole system from
// booting correctly, or if at all. Files that can be
// editted safely, will be available for you to edit
// once the system has booted successfully, and an
// administrator has been authorized to do so on the
// system.
//
// DISCLAIMER:
// I am not responsible for any damage caused to your
// world, or to your computer. Use this at your own
// risk. Although, the odds of this happening is very
// slim, and if there were to be an issue it would be
// on ComputerCraft's end. Any of my issues will be in
// your Minecraft World's CC Computer. 
--]]

--[[ LOCAL DATA ]]--
local w, h = term.getSize()

local apis    = {
    "Hydra/apis/button",
    "Hydra/apis/debugger",
    "Hydra/apis/gui",
    "Hydra/apis/lamina",  
    "Hydra/apis/text"
}

local scripts = {
    "Hydra/scripts/authorize",
    "Hydra/scripts/crash"
}

--[[ GLOBAL DATA ]]--
_G.hydra_build  = "Alpha: 08.02.15"
_G.hydra_buffer = window.create(term.current(), 1, 1, w, h, true)
_G.hydra_term   = window.create(hydra_buffer, 1, 1, w, h, true) 

--[[ PRE-INIT ]]--
hydra_term.setCursorPos(1, 1)
hydra_term.setBackgroundColor(colors.black)
hydra_term.setTextColor(colors.lime)
hydra_term.clear()
os.loadAPI("Hydra/apis/interface")

--[[ CALLING APIS & SCRIPTS ]]--
interface.compile({
    apis    = apis, 
    display = true,
    coord_x = 1, 
    coord_y = 1, 
    delay   = 0.2
})

interface.compile({
    apis    = scripts, 
    display = true,
    delay   = 0.2
})

local main = function()
    --[[ AUTHORIZE BOOTING USER ]]--
    --authorize.login()

--------------------------------------------TESTING SECTION:: ALPHA BUILD 07.25.15--------------------------------------------
    hydra_term.setCursorPos(1, 1)
    hydra_term.clear()
    
    sleep(1)
    
    gui.drawBox({
        terminal = hydra_term,
        boxType = "filled",
        color = colors.green,
        startX = 1,
        startY = 1,
        endX = w,
        endY = h
    })

    sleep(1)

    testButtons ={
        button1 = {
            name = " X ",
            width = 3,
            height = 1,
            startX = 1,
            startY = 1,
            widthPadding = 0,
            heightPadding = 0,
            centerX = false,
            centerY = false,
            button_color = colors.green,
            button_font_color = colors.white
        },

        button2 = {
            name = "Ok",
            height = 1,
            widthPadding = 1,
            heightPadding = 0,
            centerX = true,
            centerY = false,
            button_color = colors.green,
            button_font_color = colors.white
        }
    }

    test_window_vars = {
        name           = "Test Window", 
        width          = 15, 
        height         = 10, 
        startX         = 25, 
        startY         = 8, 
        text           = "Right Click the Window to Exit!", 
        titlebar_color = colors.blue, 
        font_color     = colors.black, 
        back_color     = colors.white, 
        moveable       = true, 
        canClose       = true, 
        resizeable     = true, 
        hasShadow      = true, 
        canMinimize    = true, 
        canMaximize    = true,
        buttons        = testButtons
    }
    
    testWindow = lamina.new(test_window_vars)
    testWindow:display(true)
end

local ok, err = pcall(main)

if not ok then
    crash.displayError(err, "Hydra/art/icons/crash.ico", w - 18, h - 11)
end

--[[TO-DO LOG:
Start testing the lamina API below...ensure all terminal wrapping is successful.
If necessary, you may need to build that live debugger a bit early. Furthermore,
if the paintutils API isn't redrawing the windows right, build a rough draft the HPP
to at least get it working with re-wrapping around windows and terminals.
After all that, get the gui working, and start developing the boot screen of the OS.
]]