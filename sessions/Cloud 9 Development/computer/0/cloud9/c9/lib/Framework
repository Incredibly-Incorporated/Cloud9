--[[
# Framework API Documentation:

The framework API is designed to handle settings
within programs, apis, etc. which can be used
to track, store, and manage variables with ease.

Refer to the documentation to use this powerful
API correctly.
<>
]]

--[[
# Function: 'create', Documentation:

This function will be used to create a framework
file to use in conjunction with the executing script.

> Parameters:

[file]     : "Name of the framework file."
[directory]: "Name of your working directory. If you
              are unsure, use [shell.dir()]."

> Returns:
[path]: "The full path name of the framework file
         based off of the provided arguments."
<>
]]

function create(file, directory)
    -- # Checking Variables:
    if not file then error("A file name is required!", 2) end
    if not directory then error("A directory path is required!", 2) end
    
    if type(file) ~= "string" or type(directory) ~= "string" then
        error("Arguments must be type string!", 2)
    end

    -- # Declaring Local Variables:
    local path = nil

    if string.find(file, ".fw") then
        path = directory.."/"..file
    else
        path = directory.."/"..file..".fw"
    end 

    -- # Code:
    if not fs.exists(path) then
        new_file = fs.open(path, "w")
        new_file.writeLine("{}")
    else
        return path
    end

    new_file.close()
    return path
end

--[[
# Function: 'pull', Documentation:

This function is used to pull variables from your
fw file to update your current executing script.

> Parameters:

[fw_file]: "Name of the framework file.
            This file must already exist!"
<>

> Returns:
['Data']: "Returns the data reassembled from 
           the provided framework file."
<>
]]

function pull(fw_file)
    -- # Checking Variable:
    if not fw_file then error("A framework file is required!", 2) end
    if not fs.exists(fw_file) then error("The provided path does not exist!", 2) end

    -- # Declaring Local Variables:
    local pull_file = fs.open(fw_file, "r")
    local data = pull_file.readAll()

    -- # Code:
    pull_file.close()
    return textutils.unserialize(data)
end

--[[
# Function: 'push', Documentation:

This function is used to push variables from your
current executing script to the defined fw file.

> Parameters: 

[fw_file]: <STR>     :: "Name of the framework file.
                         This file must already exist!"
[data]   : <TABLE>   :: "The table you wish to push."
[sort]   : <BOOLEAN> :: "Whether or not to sort your table."
[key]    : <BOOLEAN> :: "Whether or not to sort by key or value."
[LtoG]   : <BOOLEAN> :: "Whether or not to sort form least to greatest."
<>

> Returns:
['Boolean']: "Returns true/false based off of
              successful code execution."
<>
]]

function push(fw_file, data, sort, key, LtoG)
    -- # Declaring Local Variables: 
    -- >>> Developer Note: Sorting is still very WIP, not usable yet!
    --local sort = sort or false
    --local key = key or false
    --local LtG = LtG or false
    local sort = false
    local key = false
    local LtG = false

    -- # Checking Variables:
    if not fw_file then error("A framework file is required!", 2) end
    if not fs.exists(fw_file) then error("The provided path does not exist!", 2) end
    if type(data) ~= "table" then error("[data] must be type: 'table'!", 2) end
    if type(sort) ~= "boolean" then error("[sort] must be type: 'boolean'", 2) end
    if type(key) ~= "boolean" then error("[key] must be type: 'boolean'", 2) end
    if type(LtG) ~= "boolean" then error("[LtG] must be type: 'boolean'", 2) end

    -- # Declaring Local Variables:
    local push_file = fs.open(fw_file, "w")

    -- # Code:
    if sort then
        local table_numeric = {}
        local index_tracker = {}

        local function updateNumeric(t)
            local i = 0
            for k, v in pairs(t) do
                i = i + 1
                table.insert(table_numeric, {key = k, value = v})

                if type(v) == "table" then
                    table.insert(index_tracker, i)
                end
            end
        end

        updateNumeric(data)

        for k, v in pairs(index_tracker) do
            print("k: "..k.." | v: "..v)
        end
        sleep(3)

        while #index_tracker > 0 do
            for iteration = 1, #index_tracker do
                local i = 0
                for k, v in pairs(data) do
                    i = i + 1
                    if i == index_tracker[iteration] then
                        table.insert(table_numeric, {key = k, value = v})
                        table.remove(index_tracker, iteration)
                    end
                end
            end
        end

        local fSort = function(a, b)
            if key and LtG then
                return a.key < b.key 
            elseif key and not LtG then
                return a.key > b.key
            elseif not key and LtG then
                return a.value < b.value
            elseif not key and not LtG then
                return a.value > b.value
            else
                error("Could not sort table properly!", 2)
            end
        end
            
        table.sort(table_numeric, fSort)
        for k, v in pairs(table_numeric) do
            print("k: "..tostring(k).." | v: "..tostring(v))
            sleep(0.1)
        end

        --push_file.writeLine(string.format("Row: %d | Key: %s | Value: %s", i, v.key, v.value))
        
        push_file.write(textutils.serialize(table_numeric))
        push_file.close()
        
        return true
    else
        push_file.write(textutils.serialize(data))
        push_file.close()
        
        return true
    end
end

--[[
# Function: 'log', Documentation:

This function is used to log variables, and 
should not be used to push/pull information from
a framework file. The file does not even need to
be a framework file for logging. 

> Parameters: 

[fw_file]  : "Name of the framework file.
              This file must already exist!"
[data]     : "The table you wish to push."
[data_name]: "The variable name of your data; optional."
<>

> Returns:
['Boolean']: "Returns true/false based off of
              successful code execution."
<>
]]

function log(fw_file, data, data_name)
    -- # Checking Variables:
    if not fw_file then error("A framework file is required!", 2) end
    if not fs.exists(fw_file) then error("The provided path does not exist!", 2) end
    if not data_name then data_name = tostring(data) end

    -- # Declaring Local Variables:
    local file = fs.open(fw_file, "a") 

    local function hideFunctions(t, tName)
        local tName = tostring(tName)
        for k, v in pairs(t) do
            if type(v) == "table" then
                for k2, v2 in pairs(v) do
                    if type(v2) == "function" then
                        file.writeLine(">>> Parent Table: "..tName..", Child Table: "..tostring(k2)..", Key: "..tostring(k2).." | Value: "..tostring(v2))
                    elseif type(v2) == "table" then
                        hideFunctions(v2)
                        break
                    else
                        file.writeLine(">>> Table: "..tName..", Key: "..tostring(k).." | Value: "..textutils.serialize(v))
                    end
                end
            elseif type(v) == "function" then
                file.writeLine(">>> Table: "..tName..", Key: "..tostring(k).." | Value: "..tostring(v))
            else
                file.writeLine("> Key: "..k.." | Value: "..textutils.serialize(t))
            end
        end
    end

    local function isFunction(k, v)
        if type(v) == "function" then
            return tostring(k), tostring(v)
        elseif type(v) == "table" then
            return tostring(k), textutils.serialize(v)
        else
            return tostring(k), tostring(v)
        end
    end

    -- # Code:
    file.writeLine("LOGGED @ "..textutils.formatTime(os.time(), false)..":")
    file.writeLine(">>> "..data_name..":")

    if type(data) == "table" then
        for key, value in pairs(data) do
            if type(value) == "table" then
                file.writeLine("> Key: "..tostring(key).." | Value: "..tostring(value)..", has been formatted for view:")
                hideFunctions(value, key)
            else
                local k, v = isFunction(key, value)
                file.writeLine("> Key: "..k.." | Value: "..v)
            end
        end

        if #data == 0 then
            file.writeLine("> *Note: Table: "..data_name..", did not contain any numerical keys.")
        end
    else
        file.writeLine("> Data: "..tostring(data))
    end
    
    file.writeLine("---")
    file.close()
    
    return true
end

--[[
# Function: 'track', Documentation:

This function is used to track variables, and out
put those changes to a terminal, or log.

> Parameters: 

[data]     : "The table you want to track."
[fw_file]  : "Name of the framework file.
              This file must already exist!"
[data_name]: "The variable name of your data; optional."
<>

> Returns:
[N/a]: "No returns are available for this function."

> Notes:

1: If not fw_file is provided, the function will
output changes to the current terminal.

<>
]]

function track(data, fw_file, data_name)
    -- # Declaring Local Variables:
    local output = false
    local index = {}
    local proxy = {}
    local mt = {
        __index = function(data, k)
            local access = "*access to element: "..tostring(k)
            if output then
                print(access)
                return data[index][k]
            else
                log(fw_file, access, data_name)
                return data[index][k]
            end
        end;

        __newindex = function(data, k, v)
            local update = "*update of element: "..tostring(k)..", to: "..tostring(v)
            if output then
                print(update)
                data[index][k] = v
            else
                log(fw_file, update, data_name)
                data[index][k] = v
            end
        end;
    }

    -- # Checking Variables:
    if type(data) ~= "table" then error("[data] must be type: table!", 2) end
    if not fw_file then output = true end
    if not data_name then data_name = tostring(data) end
    if fw_file and not fs.exists(fw_file) then error("The provided path does not exist!", 2) end

    -- # Code:
    proxy[index] = data
    setmetatable(proxy, mt)
    return proxy
end

--[[
# To-Do List:
- Deprecate track function...
]]

-- End of Document